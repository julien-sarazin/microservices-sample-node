const jwt = require('jsonwebtoken');

module.exports = app => {
    const salt = app.settings.security.salt;

    return (req, res, next) => {

        return ensureAuthorization()
            .then(extractToken)
            .then(verify)
            .then(setToken)
            .then(next)
            .catch(err => res.status(err.code ||Â 500).send(err.reason || err));

        function ensureAuthorization() {
            const authorization = req.headers.authorization;

            return new Promise((resolve, reject) => {
                if (!authorization)
                    return reject({code: 401, reason: 'missing.token'});

                return resolve(authorization);
            });
        }

        function extractToken(authorization) {
            const parts = authorization.split(' ');
            if (parts.length !== 2)
                return Promise.reject({code: 401, reason: 'invalid.token'});

            if (parts[0] !== 'Bearer')
                return Promise.reject({code: 401, reason: 'invalid.scheme'});

            return parts[1];
        }

        function verify(encryptedToken) {
            return new Promise((resolve, reject) => {
                jwt.verify(encryptedToken, salt, (err, decryptedToken) => {
                    if (err && err.message === 'jwt expired')
                        return reject({code: 401, reason: 'token.expired'});

                    if (err || decryptedToken === undefined || decryptedToken === null)
                        return reject({code: 401, reason: err});

                    return resolve(decryptedToken);
                });
            });
        }

        function setToken(token) {
            req.token = token;
            req.user = token.user;
        }
    };
};