const _ = require('lodash');

module.exports = app => {
    const Casting = app.models.Casting;
    const ONE_HOUR = 3600000;

    return Action({
        rules: [
            context => (context.data.telltales || []).some(t => !t.duration || t.duration <= ONE_HOUR) ? Promise.reject('invalid.telltales') : Promise.resolve()
        ],
        execute: (context) => {
            let project = Utils.closure();

            return ensureProjectExists()
                .then(ensureConcreteIsFromProject)
                .then(create)
                .then(addToProject)
                .then(context.created);
            

            function ensureProjectExists() {
                return app.actions.projects.show({
                    'params.id': context.data.project
                })
                    .then(project.assign)
                    .catch(_.noop)
                    .then(Utils.ensureOne.unprocessable('unprocessable.project'))
            }

            function ensureConcreteIsFromProject(project) {
                return project.concretes.some(c => c.toString() === context.data.concrete) ? Promise.resolve() : context.error('unprocessable.concrete', 422);
            }

            function create() {
                return Casting.create(context.data);
            }

            function addToProject(casting) {
                project.value().castings.push(casting);
                return project.value().save()
                    .then(p => casting);
            }
        }
    });
};