const path = require('path');
const mongoose = require('mongoose');

module.exports.URIPlugin = (schema, options) => {
    if (!options || !options.path)
        throw Error('missing configuration options');

    let route = options.path;
    let identifier = options.identifier || '_id';

    schema.virtual('uri').get(function () {
        return path.join(route, this[identifier].toString());
    })
};

module.exports.loadFromEnv = settings => {
    Object.keys(settings).forEach(property => {
        if (!settings.hasOwnProperty(property))
            return;

        if (typeof settings[property] === 'object')
            return Utils.loadFromEnv(settings[property]);

        if (typeof settings[property] === 'string' && settings[property].startsWith('$')) {
            const setting = process.env[settings[property].slice(1)];
            if (!setting)
                throw new Error(`missing env property: ${settings[property].slice(1)}`);

            settings[property] = setting;
        }
    });
};

module.exports.isEmail = text => {
    return /\S+@\S+\.\S+/.test(text)
};
module.exports.ensureLength = (string, min, max) => string.length >= 8 && string.length <= 20;

