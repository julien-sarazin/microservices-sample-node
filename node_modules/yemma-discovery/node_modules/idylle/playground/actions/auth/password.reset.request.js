const utils = require('../../utils');
const jwt = require('jsonwebtoken');
const uuid = require('uuid').v4;
const sendGrid = require('sendgrid');
const pug = require('pug');
const path = require('path');
const ResourcesBuilder = require('./.email/resources');

module.exports = app => {
    const User = app.models.User;
    const sg = sendGrid(app.settings.mailer.api_key);

    return Action({
        execute: (context) => {
            const THIRTY_MINUTES = 1800;
            let user = utils.closure();

            return findUser()
                .then(utils.ensureOne({code: 422, reason: 'unprocessable.email'}))
                .then(user.assign)
                .then(generateResetPasswordToken)
                .then(sendMail)
                .then(context.noContent);

            function findUser() {
                return User.findOne()
                    .where('email')
                    .equals(context.data.email)
                    .exec();
            }

            function generateResetPasswordToken(user) {
                const token = {
                    issuerId: user.id,
                    email: user.email
                };

                return new Promise((resolve, reject) => {
                    jwt.sign(token, app.settings.security.salt, {expiresIn: THIRTY_MINUTES}, (err, encryptedToken) => {
                        if (err)
                            return reject(err);

                        resolve(encryptedToken);
                    });
                });
            }

            function sendMail(encryptedToken) {
                const resources = ResourcesBuilder.build(user.value().preferences.language);

                const request = sg.emptyRequest({
                    method: 'POST',
                    path: '/v3/mail/send',
                    body: {
                        personalizations: [
                            {
                                to: [
                                    {
                                        email: user.value().email
                                    }
                                ],
                                subject: resources('mail_subject')
                            }
                        ],
                        from: {
                            email: 'do_not_reply@pcq.com'
                        },
                        content: [
                            {
                                type: 'text/html',
                                value: pug.renderFile(path.join(__dirname, './email/template.pug'), { resources: resources, callback: context.data.callback, token: encryptedToken })
                            }
                        ]
                    }
                });
                return sg.API(request)
            }
        }
    });
};
