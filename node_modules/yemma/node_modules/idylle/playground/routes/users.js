module.exports = app => {
    const router = app.Router();

    /**
     * @api {get} /users/search/:search Search a collection of users matching the search
     * @apiName Search
     * @apiGroup Users
     * @apiVersion 1.0.0
     * @apiUse MissingTokenError
     * @apiUse InvalidSchemeError
     * @apiUse InvalidTokenError
     * @apiUse TokenExpiredError
     */
    router
    .get('/search',
        app.middlewares.ensureAuthenticated,
        app.actions.users.search.expose()
    )

    /**
     * @api {get} /users    Request list of users
     * @apiName List
     * @apiGroup Users
     * @apiVersion 1.0.0
     * @apiUse MissingTokenError
     * @apiUse InvalidSchemeError
     * @apiUse InvalidTokenError
     * @apiUse TokenExpiredError
     */

        .get('/',
            app.middlewares.ensureAuthenticated,
            app.actions.users.list.expose()
        )

        /**
         * @api {get} /users/profile   Request detailed information about the authenticated requester
         * @apiName Show
         * @apiGroup Users
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse UserNotFoundError
         */
        .get('/profile',
            app.middlewares.ensureAuthenticated,
            app.actions.users.profile.expose()
        )

        /**
         * @api {get} /users/:id    Request detailed information about a specific user
         * @apiName Show
         * @apiGroup Users
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse UserNotFoundError
         */
        .get('/:id',
            app.middlewares.ensureAuthenticated,
            app.actions.users.show.expose()
        )

        /**
         * @api {post} /users Register a new user
         * @apiDescription Register a new user into the platform
         * @apiName Create
         * @apiParam {String} email         Mandatory email
         * @apiParam {String} password      Mandatory password
         * @apiParam {String} profile       Mandatory profile (Identifier)
         * @apiParam {String} company       Mandatory company
         * @apiParam {String} first_name    Optional First name
         * @apiParam {String} last_name     Optional Last name
         * @apiGroup Users
         * @apiVersion 1.0.0
         * @apiUse UnprocessableProfileError
         * @apiUse EmailAlreadyExistsError
         */
        .post('/',
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields(['email', 'password', 'profile', 'company']),
            app.actions.users.create.expose()
        )

        /**
         * @api {put} /users/:id Update specific User
         * @apiName Update
         * @apiGroup Users
         * @apiParam {String} first_name    Optional First name
         * @apiParam {String} last_name     Optional Last name
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse UserNotFoundError
         */
        .put('/:id',
            app.middlewares.ensureAuthenticated,
            app.middlewares.bodyParser.json(),
            app.middlewares.clean('_id', 'email'),
            app.actions.users.update.expose()
        );

    app.server.use(`${app.settings.basePath}/v${app.settings.version}/users`, router);
};

