const Utils = require('../../utils/index');
const describe = require('mocha').describe;
const it = require('mocha').it;

let sut;
let owner = Utils.closure();
let collaborator = Utils.closure();
let concrete = Utils.closure();
let fake_profile = Utils.closure();

const name = 'project';
const client = 'LAFARGE HOLCIM';
const address = {
    street: '36 Rue de la boustifaille',
    zip_code: '29160',
    city: 'Crozon',
    state: 'FR',
    country: 'France'
};

describe('projects.create', () => {
    beforeEach(() => {
        sut = require('../../index');
        return createProfile()
            .then(createOwner)
            .then(createCollaborator)
            .then(createConcrete);
    });

    afterEach(() => {
        return clearUsers()
            .then(clearConcretes)
            .then(clearProjects);
    });

    it('should succeed when all information are correct', (done) => {
        sut.actions.projects
            .create({
                user: owner.value(),
                data: {
                    name: name,
                    client: client,
                    address: address
                }
            })
            .should.be.fulfilled
            .and.notify(done)
    });

    it('should fail when one or more collaborator does not exist', (done) => {
        sut.actions.projects
            .create({
                user: owner.value(),
                data: {
                    name: name,
                    client: client,
                    address: address,
                    collaborators: [
                        collaborator.value()._id.toString(),
                        '5953ce433dc1684e3105adab'
                    ]
                }
            })
            .should.be.rejectedWith(Error, 'unprocessable.collaborator')
            .and.eventually.have.property('code', 422)
            .and.notify(done)
    });


    it('should associate collaborators to the project', (done) => {
        sut.actions.projects
            .create({
                user: owner.value(),
                data: {
                    name: name,
                    client: client,
                    address: address,
                    collaborators: [collaborator.value().id]
                }
            })
            .then(ensureCollaboratorAssociated)
            .should.be.fulfilled
            .and.notify(done);

        function ensureCollaboratorAssociated(project) {
            return sut.models.User.findById(collaborator.value().id)
                .then(user => user.projects.length > 0 ? Promise.resolve() : Promise.reject())
                .then(() => (project.collaborators.length > 0) ? Promise.resolve() : Promise.reject())
        }
    });

    it('should associate concrete to the project', (done) => {
        sut.actions.projects
            .create({
                user: owner.value(),
                data: {
                    name: name,
                    client: client,
                    address: address,
                    concretes: [concrete.value().id]
                }
            })
            .then(ensureConcreteAssociated)
            .should.be.fulfilled
            .and.notify(done);

        function ensureConcreteAssociated(project) {
            return sut.models.Concrete.findById(concrete.value().id)
                .then(instance => instance.projects.length > 0 ? Promise.resolve() : Promise.reject())
                .then(() => (project.concretes.length > 0) ? Promise.resolve() : Promise.reject())
        }
    });
});


function createProfile() {
    return sut.models.Profile.create({
        title: 'fake'
    })
        .then(fake_profile.assign)
}

function createOwner() {
    return sut.models.User.create({
        email: 'test@test.com',
        password: 'password',
        company: 'Digipolitan',
        profile: fake_profile.value()._id
    })
        .then(owner.assign);
}

function createCollaborator() {
    return sut.models.User.create({
        email: 'test@digipolitan.com',
        password: 'password',
        company: 'Digipolitan',
        profile: fake_profile.value()._id
    })
        .then(collaborator.assign)
}

function createConcrete() {
    return sut.models.Concrete.create({
        name: 'C2',
        reference: 'MX335',
        owner: owner.value()
    })
        .then(concrete.assign)
}
function clearUsers() {
    return sut.models.User.remove();
}

function clearConcretes() {
    return sut.models.Concrete.remove();
}

function clearProjects() {
    return sut.models.Project.remove();
}