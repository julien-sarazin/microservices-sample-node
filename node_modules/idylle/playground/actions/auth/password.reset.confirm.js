const jwt = require('jsonwebtoken');
const sha1 = require('sha1');

module.exports = app => {
    const User = app.models.User;
    const salt = app.settings.security.salt;

    return Action({
        rules: [
            context => Utils.ensureLength(context.data.password, 8, 20) || Promise.reject('invalid.email.length')
        ],
        execute: (context) => {
            let user = Utils.closure();

            return validateToken()
                .then(updatePassword)
                .then(Utils.ensureOne({code: 422, reason: 'unprocessable.user'}))
                .then(context.noContent);


            function validateToken() {
                return new Promise((resolve, reject) => {
                    jwt.verify(context.data.token, salt, (err, token) => {
                        if (err && err.message === 'jwt expired')
                            return reject(new ActionError('token.expired', 401));

                        if (err || !token.issuerId)
                            return reject(new ActionError('invalid.token', 401));

                        resolve(token.issuerId);
                    });
                });
            }

            function updatePassword(userId) {
                return User.findByIdAndUpdate(userId, {password: sha1(context.data.password)});
            }
        }
    });
};
