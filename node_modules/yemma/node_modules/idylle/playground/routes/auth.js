module.exports = app => {
    const router = app.Router();
    /**
     * @api {post} /auth/login
     * Authenticate a user
     * @apiParam {String} email     Mandatory email
     * @apiParam {String} password  Mandatory password
     * @apiGroup Auth
     * @apiVersion 1.0.0
     * @apiUse UserNotFoundError
     */
    router
        .post('/login',
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields(['email', 'password']),
            app.actions.auth.login.expose()
        )

        /**
         * @api {post} /reset-password/request
         * Request a password change
         * @apiParam {String} email         Mandatory email
         * @apiParam {String} callback      Mandatory callback where the client will be redirected from the mail
         * @apiGroup Auth
         * @apiVersion 1.0.0
         * @apiUse UnprocessableEmailError
         * @apiUse UnprocessableUserError
         */
        .post('/reset-password/request',
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields('callback'),
            app.actions.auth.password.reset.request.expose()
        )

        /**
         * @api {post} /reset-password/confirm
         * Confirm a password change
         * @apiParam {String} token         Mandatory token provided in the email
         * @apiParam {String} password      Mandatory password
         * @apiGroup Auth
         * @apiUse UnprocessableUserError
         * @apiUse TokenExpiredError
         * @apiUse InvalidTokenError
         */
        .post('/reset-password/confirm',
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields(['token', 'password']),
            app.actions.auth.password.reset.confirm.expose()
        );

    app.server.use(`${app.settings.basePath}/v${app.settings.version}/auth`, router);
};