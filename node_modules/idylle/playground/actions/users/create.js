const sha1 = require('sha1');
class ContextNotFoundError extends Error {}

module.exports = app => {
    const User = app.models.User;
    const Profile = app.models.Profile;

    return Action({
        rules: [
            context => Utils.isEmail(context.data.email) || context.error(400, 'invalid.email'),
            context => Utils.ensureLength(context.data.password, 8, 20) || context.error(400, 'invalid.password.length'),
        ],
        execute: (context) => {
            let profile = Utils.closure();

            return findUser()
                .then(Utils.ensureNone.conflict('email.already.used'))
                .then(findProfile)
                .then(Utils.ensureOne.unprocessable('unprocessable.profile'))
                .then(profile.assign)
                .then(encryptPassword)
                .then(createUser)
                .then(context.created);

            function findUser() {
                return User.findOne({
                    email: context.data.email
                });
            }

            function findProfile() {
                return Profile.findById(context.data.profile);
            }

            function encryptPassword() {
                context.data.password = sha1(context.data.password);
            }

            function createUser() {
                delete context.data.profile;
                let user = new User(context.data);
                user.profile = profile.value();
                return user.save();
            }
        }
    });
};