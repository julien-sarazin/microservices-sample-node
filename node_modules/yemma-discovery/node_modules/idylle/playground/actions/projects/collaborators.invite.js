const Promise = require('bluebird');

module.exports = app => {
    const Project = app.models.Project;

    return Action({
        execute: context => {
            let project = Utils.closure();

            return findProject()
                .then(Utils.ensureOne({code: 422, reason: 'unprocessable.project'}))
                .then(project.assign)
                .then(ensureIssuerIsOwner)
                .then(ensureNotAlreadyCollaborator)
                .then(ensureExist)
                .then(addToProject)
                .then(addToCollaborators)
                .then(context.noContent);

            function findProject() {
                return Project.findById(context.params.id);
            }

            function ensureIssuerIsOwner(project) {
                return project.owner.toString() === context.user.id ? project : context.error('not.owner', 403)
            }

            function ensureNotAlreadyCollaborator(project) {
                let collaborators = (context.data.collaborators instanceof Array) ? context.data.collaborators : [context.data.collaborators];
                return project.collaborators.some(sc => collaborators.some(c => sc.toString() === c)) ? context.error('already.collaborator', 409) : true;
            }

            function ensureExist() {
                return Promise.each(context.data.collaborators || [], id => app.actions.users.show({
                    params: {
                        id: id
                    }
                }))
                    .catch(() => context.error('unprocessable.collaborators', 422))
            }

            function addToProject() {
                project.value().collaborators = project.value().collaborators.concat([context.data.collaborators]);
                return project.value().save()
            }

            function addToCollaborators() {
                return Promise.each(context.data.collaborators || [], id => app.actions.users.update({
                    params: {
                        id: id
                    },
                    data: {
                        $push: {
                            projects: project.value().id
                        }
                    }
                }))
            }
        }
    });
};