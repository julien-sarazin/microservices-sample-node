const _ = require('lodash');
const spawn = require('child_process').spawn;
const Promise = require('bluebird');

module.exports = app => {
    const User = app.models.User;
    const env = process.env.NODE_ENV || 'development';

    if (env !== 'development')
        return loadProfiles();

    return ensureNotInitialized()
        .then(initializeCollections)
        .catch(_.noop);


    function ensureNotInitialized() {
        return User.count()
            .then((c) => c > 0 ? Promise.reject(new Error('already initialized')) : Promise.resolve())
    }

    function initializeCollections() {
        return new Promise((resolve, reject) => {
            const sh = spawn('sh', ['load.sh'], {stdio: 'inherit', cwd: __dirname});
            sh.on('close', () => resolve())
        });
    }

    function loadProfiles() {
        const Profile = app.models.Profile;
        const profiles = app.settings.profiles;

        return Promise.each(profiles, load);

        function load(title) {
            return Profile.findOrCreate({
                title: title
            });
        }
    }
};