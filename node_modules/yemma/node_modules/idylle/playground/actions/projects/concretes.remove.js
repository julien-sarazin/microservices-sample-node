const Promise = require('bluebird');

module.exports = app => {
    const Project = app.models.Project;

    return Action({
        execute: context => {
            let project = Utils.closure();

            return findProject()
                .then(Utils.ensureOne({code: 422, reason: 'unprocessable.project'}))
                .then(project.assign)
                .then(ensureIssuerIsOwner)
                .then(ensureAllConcretes)
                .then(removeFromProject)
                .then(context.noContent);

            function findProject() {
                return Project.findById(context.params.id);
            }

            function ensureIssuerIsOwner(project) {
                return project.owner.toString() === context.user.id ? project : context.error('not.owner', 403)
            }

            function ensureAllConcretes(project) {
                let concretes = (context.data.concretes instanceof Array) ? context.data.concretes : [context.data.concretes];
                return project.concretes.some(sc => concretes.some(c => sc.toString() !== c)) ? context.error('unprocessable.concretes', 422) : true;
            }

            function removeFromProject() {
                project.value().concretes.remove(context.data.concretes);
                return project.value().save();
            }
        }
    });
};