const Promise = require('bluebird');
const _ = require('lodash');

module.exports = app => {
    const Project = app.models.Project;

    return Action({
        execute: (context) => {
            return ensureCollaboratorsExist()
                .then(ensureConcretesExist)
                .then(createProject)
                .then(setRelations)
                .then(context.created);

            function ensureCollaboratorsExist() {
                return Promise.each((context.data.collaborators || []), ensureExists);

                function ensureExists(userId) {
                    return app.actions.users.show({
                        params: {
                            id: userId
                        }
                    })
                        .catch(_.noop)
                        .then(Utils.ensureOne({code: 422, reason: 'unprocessable.collaborators'}))
                }
            }

            function ensureConcretesExist() {
                return Promise.each((context.data.concretes || []), ensureExists);

                function ensureExists(concreteId) {
                    return app.actions.concretes.show({
                        params: {
                            id: concreteId
                        }
                    })
                        .catch(_.noop)
                        .then(Utils.ensureOne({code: 422, reason: 'unprocessable.concretes'}))
                }
            }

            function createProject() {
                let project = new Project(context.data);
                project.owner = context.user.id;
                project.concretes = context.data.concretes;
                project.collaborators = context.data.collaborators;
                return project.save();
            }

            function setRelations(project) {
                return Promise.all([
                    addToConcretes(),
                    addToUsers()
                ])
                    .then(() => project);

                function addToConcretes() {
                    return Promise.each(context.data.concretes || [], id => app.actions.concretes.update({
                        params: {
                            id: id
                        },
                        data: {
                            $push: {
                                projects: project
                            }
                        }
                    }))
                }

                function addToUsers() {
                    const users = [context.user.id].concat(context.data.collaborators || []);
                    return Promise.each(users, id => app.actions.users.update({
                        params: {
                            id: id
                        },
                        data: {
                            $push: {
                                projects: project
                            }
                        }
                    }))
                }
            }
        }
    });
};