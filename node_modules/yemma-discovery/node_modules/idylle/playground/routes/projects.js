module.exports = app => {
    const router = app.Router();

    /**
     * @api {get} /projects    Request list of projects
     * @apiName List
     * @apiGroup Projects
     * @apiVersion 1.0.0
     * @apiUse MissingTokenError
     * @apiUse InvalidSchemeError
     * @apiUse InvalidTokenError
     * @apiUse TokenExpiredError
     */
    router
        .get('/',
            app.middlewares.ensureAuthenticated,
            app.actions.projects.list.expose()
        )

        /**
         * @api {get} /projects/:id    Request detailed information about a specific project
         * @apiName Show
         * @apiGroup Projects
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse ProjectNotFoundError
         */
        .get('/:id',
            app.middlewares.ensureAuthenticated,
            app.actions.projects.show.expose()
        )

        /**
         * @api {post} /projects        Create a new project
         * @apiDescription              Register a new project into the platform
         * @apiName Create
         * @apiParam {String} name          Mandatory name
         * @apiParam {String} client        Mandatory client
         * @apiParam {Object} address       Mandatory address
         * @apiParam {Array} collaborators  Optional collaborators (identifiers) means they must have registered into the platform
         * @apiParam {Array} concrete       Optional concretes (raw) means concretes will be added to the database and associated to the work project.
         * @apiGroup Projects
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse UnprocessableCollaboratorError
         */
        .post('/',
            app.middlewares.ensureAuthenticated,
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields([
                'name',
                'client',
                'address.street',
                'address.zip_code',
                'address.city',
                'address.country'
            ]),
            app.actions.projects.create.expose()
        )

        /**
         * @api {put} /projects/:id Update specific Project
         * @apiName Update
         * @apiGroup Projects
         * @apiParam {String} first_name    Optional First name
         * @apiParam {String} last_name     Optional Last name
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse ProjectNotFoundError
         */
        .put('/:id',
            app.middlewares.ensureAuthenticated,
            app.middlewares.bodyParser.json(),
            app.middlewares.clean('collaborators', 'concretes', 'owner', '_id'),
            app.actions.projects.update.expose()
        )

        /**
         * @api {post} /projects/:id/invite/collaborators Invite a user to join the project
         * @apiDescription Cannot add a user that is already member
         * @apiName Invite Collaborators
         * @apiGroup Projects
         * @apiParam {Array} collaborators    Mandatory list of collaborators references
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse ProjectNotFoundError
         */
        .post('/:id/invite/collaborators',
            app.middlewares.ensureAuthenticated,
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields(['collaborators']),
            app.actions.projects.collaborators.invite.expose()
        )

        /**
         * @api {post} /projects/:id/exclude/collaborators Exclude a user from the project
         * @apiDescription Cannot exclude not a member
         * @apiName Exclude Collaborators
         * @apiGroup Projects
         * @apiParam {Array} collaborators    Mandatory list of collaborators references
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse ProjectNotFoundError
         */
        .post('/:id/exclude/collaborators',
            app.middlewares.ensureAuthenticated,
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields(['collaborators']),
            app.actions.projects.collaborators.exclude.expose()
        )

        /**
         * @api {post} /projects/:id/concretes/add Add a concrete type to a project
         * @apiDescription Cannot exclude not a member
         * @apiName Add Concrete
         * @apiGroup Projects
         * @apiParam {Array} concretes    Mandatory list of concretes
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse ProjectNotFoundError
         */
        .post('/:id/concretes/add',
            app.middlewares.ensureAuthenticated,
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields(['concretes']),
            app.actions.projects.concretes.add.expose()
        )

        /**
         * @api {post} /projects/:id/concretes/remove Remove a concrete type from a project
         * @apiDescription Cannot remove a concrete not in the project
         * @apiName Remove Concrete
         * @apiGroup Projects
         * @apiParam {Array} concretes    Mandatory list of concretes
         * @apiVersion 1.0.0
         * @apiUse MissingTokenError
         * @apiUse InvalidSchemeError
         * @apiUse InvalidTokenError
         * @apiUse TokenExpiredError
         * @apiUse ProjectNotFoundError
         */
        .post('/:id/concretes/remove',
            app.middlewares.ensureAuthenticated,
            app.middlewares.bodyParser.json(),
            app.middlewares.ensureBodyFields(['concretes']),
            app.actions.projects.concretes.remove.expose()
        );

    app.server.use(`${app.settings.basePath}/v${app.settings.version}/projects`, router);
};

