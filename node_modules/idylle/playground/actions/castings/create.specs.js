const Utils = require('../../utils/index');
const describe = require('mocha').describe;
const it = require('mocha').it;

let sut;
let fake_profile = Utils.closure();
let owner = Utils.closure();
let valid_project = Utils.closure();
let invalid_project = "595e3a961301a19a495aa64b";
let valid_concrete = Utils.closure();
let invalid_concrete = "595e3a961301a19a495aa64b";

describe('castings.create', () => {
    beforeEach(() => {
        sut = require('../../index');
        return createProfile()
            .then(createOwners)
            .then(createConcrete)
            .then(createProjects);
    });

    afterEach(() => {
        return clearUsers()
            .then(clearConcretes)
            .then(clearProjects);
    });

    it('should fail if the project does not exist', (done) => {
        sut.actions.castings.create({
            data: {
                project: invalid_project
            }
        })
            .should.be.rejectedWith(Error)
            .and.eventually.have.property('message', 'unprocessable.project')
            .and.notify(done);
    });

    it('should fail if concrete is not from the project', (done) => {
        sut.actions.castings.create({
            data: {
                project: valid_project.value(),
                concrete: invalid_concrete
            }
        })
            .should.be.rejectedWith(Error)
            .and.eventually.have.property('message', 'unprocessable.concrete')
            .and.notify(done);
    });
    //TODO
    // it('should fail if at least one of telltales is not valid', (done) => {
    //     sut.actions.castings.create({
    //         data: {
    //             project: valid_project.value(),
    //             concrete: valid_concrete.value(),
    //             telltales: [
    //                 {duration: 360000000},
    //                 {},
    //                 {duration: 280}
    //             ]
    //         }
    //     })
    //         .should.be.rejectedWith(Error)
    //         .and.eventually.have.property('message', 'unprocessable.telltales')
    // });
    //
    // it('should succeed if all information are correct', (done) => {
    //     sut.actions.castings.create({
    //         data: {
    //             project: valid_project.value(),
    //             concrete: valid_concrete.value(),
    //             date: new Date().toString(),
    //             title: 'Title'
    //         }
    //     })
    //         .should.be.fulfilled
    //         .and.notify(done);
    // });
    //
    // it('should add the casting to the project', (done) => {
    //     sut.actions.castings.create({
    //         data: {
    //             project: valid_project.value(),
    //             concrete: valid_concrete.value(),
    //             date: new Date().toString(),
    //             title: 'Title'
    //         }
    //     })
    //         .should.be.fulfilled
    //         .and.notify(done);
    // });
});

function createProfile() {
    return sut.models.Profile.create({
        title: 'fake'
    })
        .then(fake_profile.assign);
}

function createOwners() {
    return sut.models.User.create({
        email: 'owner@digipolitan.com',
        password: 'password',
        company: 'Digipolitan',
        profile: fake_profile.value()
    })
        .then(owner.assign)
}


function createConcrete() {
    return sut.actions.concretes.create({
        user: owner.value(),
        data: {
            reference: 'MX33',
            name: 'Super dry',
            project: valid_project.value()
        }
    })
        .then(valid_concrete.assign);
}


function createProjects() {
    return sut.models.Project
        .create({
            owner: owner.value().id,
            name: 'project',
            client: 'LAFARGE HOLCIM',
            address: {
                street: '36 Rue de la boustifaille',
                zip_code: '29160',
                city: 'Crozon',
                state: 'FR',
                country: 'France'
            }
        })
        .then(valid_project.assign)
}

function clearUsers() {
    return sut.models.User.remove();
}

function clearProjects() {
    return sut.models.Project.remove();
}

function clearConcretes() {
    return sut.models.Concrete.remove();
}