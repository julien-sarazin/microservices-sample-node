
module.exports = app => {
    const Project = app.models.Project;

    return Action({
        execute: context => {
            return ensureProjectExists()
                .then(ensureIssuerIsOwner)
                .then(ensureConcretesExist)
                .then(ensureNotAlreadyInProject)
                .then(add)
                .then(context.noContent);

            function ensureProjectExists() {
                return Project.findById(context.params.id)
                    .then(Utils.ensureOne({code: 422, reason: 'unprocessable.project'}))
            }

            function ensureIssuerIsOwner(project) {
                return project.owner.toString() === context.user.id ? project : context.error('not.owner', 403)
            }

            function ensureConcretesExist(project) {
                return app.actions.concretes.list({
                    criteria: {
                        where: {
                            _id: {
                                $in: (context.data.concretes instanceof Array) ? context.data.concretes : [context.data.concretes]
                            }
                        }
                    }
                })
                .then(results => (results.length === context.data.concretes.length) ? project : context.error('unprocessable.concretes', 422))
            }

            function ensureNotAlreadyInProject(project) {
                let concretes = (context.data.concretes instanceof Array) ? context.data.concretes: [context.data.concretes];
                return project.concretes.some(sc => concretes.some(c => sc.toString() === c)) ? context.error('already.in.project', 409) : project;
            }

            function add(project) {
                project.concretes = project.concretes.concat([context.data.concretes]);
                return project.save()
            }
        }
    });
};